使い方

 以下のようにスクリプトを実行することでCloudFormationスタックを構築します。

	./update_stack.py <パラメタファイル名>


・実行前の準備

 このスクリプトは、"AWS API"を使用しています。APIが利用できるようにIAMユーザの設定をしておいてください。
common.yml(メインサイト用)、common2.yml(ディザスタサイト用)に以下のパラメタを設定してください。

	SiteID		任意の文字列です。CloudFormationのスタック名に使います。
	CFBucket	テンプレートを配備するS3バケットです。事前に作成しておいてください。
	Region		サイトを構築したいリージョンを指定してください。
	DomainName	このドメインをRoute53に設定して名前解決に利用します。

 上述のパラメタ定義により決定される以下の1つのS3バケットを事前に作成しておいてください。

	CFBucket			CloudFormationの資材を格納します。


・パラメタ/テンプレート

 parametersフォルダに以下のパラメタファイルを用意しています。
引数に指定したパラメタファイルごとにtemplatesフォルダにあるテンプレートが実行され、スタックが構成されます。

	+---+-----------------+-----------------------------------------------------------------+
	| # | filename        | 説明                                                             |
	+---+-----------------+-----------------------------------------------------------------+
	| 1 | kbn_pre.yml     | イメージビルダーでAMI作成、Route53のホストゾーン作成                    |
	+---+-----------------+-----------------------------------------------------------------+
	| 2 | kbn_1_asg.yml   | ALB+ASG構成のWebサイト(DBなし)を構築します。メインサイト用              |
	+---+-----------------+-----------------------------------------------------------------+
	| 3 | kbn_1_asgdb.yml | ALB+ASG構成のWebサイト(DBあり)を構築します。メインサイト用              |
	+---+-----------------+-----------------------------------------------------------------+
	| 4 | kbn_2_asg.yml   | ALB+ASG構成のWebサイト(DBなし)を構築します。ディザスタサイト用           |
	+---+-----------------+-----------------------------------------------------------------+
	| 5 | kbn_2_asgdb.yml | ALB+ASG構成のWebサイト(DBあり)を構築します。ディザスタサイト用           |
	+---+-----------------+-----------------------------------------------------------------+


 パラメタファイルと呼び出されるテンプレートの関係は以下のようになっています。

	               +-----------------------------+
	               |          param_file#        |
	+--------------+-----+-----+-----+-----+-----+
	| templates    |  1  |  2  |  3  |  4  |  5  |
	+--------------+-----+-----+-----+-----+-----+
	| _VPC(e).yaml |  *  |  *  |  *  |  *  |  *  |
	+--------------+-----+-----+-----+-----+-----+
	| _AMI.yaml    | yes | yes | yes |  -  |  -  |
	+--------------+-----+-----+-----+-----+-----+
	| _R53.yaml    | yes | yes | yes |  -  |  -  |
	+--------------+-----+-----+-----+-----+-----+
	| _S3.yaml     |  -  | yes | yes | yes | yes |
	+--------------+-----+-----+-----+-----+-----+
	| _RDS.yaml    |  -  | no  | yes | no  | yes |
	+--------------+-----+-----+-----+-----+-----+
	| _ECA.yaml    |  -  | no  | yes | no  | yes |
	+--------------+-----+-----+-----+-----+-----+
	| _ASG(e).yaml |  -  | yes | yes | yes | yes |
	+--------------+-----+-----+-----+-----+-----+
	※ (e)は、VPCエンドポイントを設定します。セキュリティが向上しますが、通信量で課金されます。



・実行例

 東京(メインサイト)、オレゴン(ディザスタサイト)でWebサイトを構築して、DjangoのWebアプリをデプロイしてみます。

1. 何もスタックがないところから、初めて実行する場合は、以下のコマンドでAMI作成/ホストゾーン作成してください。

	./update_statck.py parameters/kbn_pre.yml


2. AMIのイメージIDをパラメタファイルのImageIdに定義してください。
   必要に応じてRoute53に名前解決を委譲してください。

3. 東京(メイン)にWebサイト(DBあり)を構築します。

	./update_stack.py parameters/kbn_1_asgdb.yml


4. django-drasgプロジェクト(https://github.com/toshto/django-drasg)にアプリケーションデプロイのサンプルがあります。
   USAGE.txt をみてデプロイしてください。

 ディザスタサイトを追加する場合

5. オレゴン(ディザスタサイト)にコピーされたAMIのイメージIDをパラメタファイルのImageIdに定義してください。
   ホストゾーンIDをディザスタサイトのパラメタファイルのHostedZoneIdに定義してください。

6. オレゴン(ディザスタ)にWebサイト(DBあり)を構築します。

	./update_stack.py parameters/kbn_2_asgdb.yml


7. ディザスタサイトにも同様にアプリケーションデプロイをしてください。
