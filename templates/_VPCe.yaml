AWSTemplateFormatVersion: 2010-09-09
Description: 'VPC Resources created by cf template'

Parameters:
#
# Parameters for subnet
#
  StackName:
    Type: String
    Description: 'Cloudformation stack name'
  CidrVPC:
    Type: String
  CidrALL:
    Type: String
  CidrPubA:
    Type: String
  CidrPubC:
    Type: String
  CidrPubD:
    Type: String
  CidrPrvA:
    Type: String
  CidrPrvC:
    Type: String
  CidrPrvD:
    Type: String

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref CidrVPC
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - { Key: Name, Value: !Sub "VPC-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - { Key: Name, Value: !Sub "IGW-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }

  InternetGatewayAttach:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  DHCPOptions:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainName: !Sub ${AWS::Region}.compute.internal
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - { Key: Name, Value: !Sub "DHCPOption-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }

  DHCPOptionsAttach:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
#
# ネットワークアクセスリスト
#
  NetworkAclPub:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "NetworkACLPub-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }
  NetworkAclPrv:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "NetworkACLPrv-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }

# Outgoing entry in ACL
  NetworkACLEntryPub1:
    # VPCからインターネットへのすべての通信を許可
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref NetworkAclPub
  NetworkACLEntryPrv1:
    # VPCからインターネットへのすべての通信を許可
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref NetworkAclPrv

# Incoming entry in ACL
  NetworkACLEntryPub99:
    # 同一VPCからの全ての通信を許可
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: !Ref CidrALL
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref NetworkAclPub
  NetworkACLEntryPrv99:
    # 同一VPCからの全ての通信を許可(ゲートウェイ型VPCエンドポイント(パブリックIP)からの通信を許可する。)
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
#      CidrBlock: !Ref CidrALL
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref NetworkAclPrv

  NetworkACLEntryPub2:
    # インターネットからALBへのhttps接続を許可
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: '0.0.0.0/0'
      Egress: false
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: '101'
      NetworkAclId: !Ref NetworkAclPub

#  NetworkACLEntryPub3:
#    # インターネットからEC2インスタンスのssh接続を許可
#    Type: 'AWS::EC2::NetworkAclEntry'
#    Properties:
#      CidrBlock: '0.0.0.0/0'
#      Egress: false
#      PortRange:
#        From: 22
#        To: 22
#      Protocol: 6
#      RuleAction: allow
#      RuleNumber: '102'
#      NetworkAclId: !Ref NetworkAclPub

#  NetworkACLEntryPub4:
#    # AWS-CLIはインターネットからEC2インスタンスのエフェメラルポートにつなぎ返す？ -> エンドポイントを使ってインターネット接続をしないようにできます。
#    Type: 'AWS::EC2::NetworkAclEntry'
#    Properties:
#      CidrBlock: '0.0.0.0/0'
#      Egress: false
#      PortRange:
#        From: 32768
#        To: 61000
#      Protocol: 6
#      RuleAction: allow
#      RuleNumber: '103'
#      NetworkAclId: !Ref NetworkAclPub

#
# ルートテーブル
#
  RouteTablePub:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "RTBLPub-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }

  RouteTablePrv:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "RTBLPrv-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }

# Public route with IGW
  RouteIGW:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTablePub
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttach

#
# サブネット
#
  SubnetPubAZa:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref CidrPubA
      AvailabilityZone: !Sub '${AWS::Region}a'
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "SubnetPubA-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }
  SubnetPubAZc:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref CidrPubC
      AvailabilityZone: !Sub '${AWS::Region}c'
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "SubnetPubC-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }
  SubnetPubAZd:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref CidrPubD
      AvailabilityZone: !Sub '${AWS::Region}d'
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "SubnetPubD-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }

  SubnetPrvAZa:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref CidrPrvA
      AvailabilityZone: !Sub '${AWS::Region}a'
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "SubnetPrvA-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }
  SubnetPrvAZc:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref CidrPrvC
      AvailabilityZone: !Sub '${AWS::Region}c'
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "SubnetPrvC-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }
  SubnetPrvAZd:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref CidrPrvD
      AvailabilityZone: !Sub '${AWS::Region}d'
      VpcId: !Ref VPC
      Tags:
        - { Key: Name, Value: !Sub "SubnetPrvD-${AWS::StackName}" }
        - { Key: StackName, Value: !Ref 'AWS::StackName' }

#
# サブネットとネットワークアクセスリストの紐付け
#
  SubnetACLPubAZa:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkAclPub
      SubnetId: !Ref SubnetPubAZa
  SubnetACLPubAZc:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkAclPub
      SubnetId: !Ref SubnetPubAZc
  SubnetACLPubAZd:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkAclPub
      SubnetId: !Ref SubnetPubAZd
  SubnetACLPrvAZa:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkAclPrv
      SubnetId: !Ref SubnetPrvAZa
  SubnetACLPrvAZc:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkAclPrv
      SubnetId: !Ref SubnetPrvAZc
  SubnetACLPrvAZd:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref NetworkAclPrv
      SubnetId: !Ref SubnetPrvAZd

#
# サブネットとルートテーブルの紐付け
#
  SubnetRoutePubAZa:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPubAZa
  SubnetRoutePubAZc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPubAZc
  SubnetRoutePubAZd:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePub
      SubnetId: !Ref SubnetPubAZd

  SubnetRoutePrvAZa:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePrv
      SubnetId: !Ref SubnetPrvAZa
  SubnetRoutePrvAZc:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePrv
      SubnetId: !Ref SubnetPrvAZc
  SubnetRoutePrvAZd:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTablePrv
      SubnetId: !Ref SubnetPrvAZd

#
# VPC End Points
#
  # SecurityGroup for VPC EndPoints
  SecurityGroupEndPoint:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for VPC EndPoints'
      GroupName: 'EndPoints'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      Tags:
        - { Key: Name, Value: 'EndPoints' }
        - { Key: StackName, Value: !Ref StackName }

  # Entry for SecurityGroupEndPoint
  ingress301:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref SecurityGroupEndPoint
      IpProtocol: TCP
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
  egress301:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref SecurityGroupEndPoint
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0

  EC2VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds:
        - !Ref SubnetPrvAZa
        - !Ref SubnetPrvAZc
        - !Ref SubnetPrvAZd
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecurityGroupEndPoint

  EC2VPCEndpoint2:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds:
        - !Ref SubnetPrvAZa
        - !Ref SubnetPrvAZc
        - !Ref SubnetPrvAZd
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecurityGroupEndPoint

  EC2VPCEndpoint3:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds:
        - !Ref SubnetPrvAZa
        - !Ref SubnetPrvAZc
        - !Ref SubnetPrvAZd
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecurityGroupEndPoint

  EC2VPCEndpoint4:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds:
        - !Ref SubnetPrvAZa
        - !Ref SubnetPrvAZc
        - !Ref SubnetPrvAZd
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecurityGroupEndPoint

  EC2VPCEndpoint5:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds:
        - !Ref SubnetPrvAZa
        - !Ref SubnetPrvAZc
        - !Ref SubnetPrvAZd
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecurityGroupEndPoint

  EC2VPCEndpoint6:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.monitoring"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds:
        - !Ref SubnetPrvAZa
        - !Ref SubnetPrvAZc
        - !Ref SubnetPrvAZd
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecurityGroupEndPoint

  EC2VPCEndpoint7:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.codedeploy"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds:
        - !Ref SubnetPrvAZa
        - !Ref SubnetPrvAZc
        - !Ref SubnetPrvAZd
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecurityGroupEndPoint

  EC2VPCEndpoint8:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcEndpointType: "Interface"
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.codedeploy-commands-secure"
      PolicyDocument: |
        {
          "Statement": [
            {
              "Action": "*", 
              "Effect": "Allow", 
              "Principal": "*", 
              "Resource": "*"
            }
          ]
        }
      SubnetIds:
        - !Ref SubnetPrvAZa
        - !Ref  SubnetPrvAZc
        - !Ref  SubnetPrvAZd
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SecurityGroupEndPoint

  EC2VPCEndpoint9:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
        VpcEndpointType: "Gateway"
        VpcId: !Ref VPC
        ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
        PolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":\"*\",\"Resource\":\"*\"}]}"
        RouteTableIds:
          - !Ref RouteTablePrv
        PrivateDnsEnabled: false

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: VpcId
  SubnetPrvAZa:
    Value: !Ref SubnetPrvAZa
    Export:
      Name: SubnetPrvAZa
  SubnetPrvAZc:
    Value: !Ref SubnetPrvAZc
    Export:
      Name: SubnetPrvAZc
  SubnetPrvAZd:
    Value: !Ref SubnetPrvAZd
    Export:
      Name: SubnetPrvAZd
  SubnetPubAZa:
    Value: !Ref SubnetPubAZa
    Export:
      Name: SubnetPubAZa
  SubnetPubAZc:
    Value: !Ref SubnetPubAZc
    Export:
      Name: SubnetPubAZc
  SubnetPubAZd:
    Value: !Ref SubnetPubAZd
    Export:
      Name: SubnetPubAZd
